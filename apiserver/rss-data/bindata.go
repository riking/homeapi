// Code generated by go-bindata.
// sources:
// rss.xml
// DO NOT EDIT!

package rss_data

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _rssXml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x92\x5f\x8f\xea\x36\x10\xc5\xdf\xfd\x29\x4e\xf3\xd4\x4a\x90\x70\x79\xa8\xae\xda\x6c\x56\x2c\xec\xb6\xd1\x46\x20\x91\xd0\xd5\x3e\x9a\x64\x48\x2c\x8c\x9d\xda\xce\xb2\x28\xe2\xbb\x57\x09\xff\x96\xb6\xd2\x7d\xb2\x66\xe6\xe7\x99\xe3\x33\x0e\x1f\x3f\x77\x12\x1f\x64\xac\xd0\xea\xc1\xfb\xe6\x8f\x3c\x90\xca\x75\x21\x54\xf9\xe0\xad\xb2\x97\xe1\x77\x0f\x8f\x11\x0b\x7f\x1a\x0e\xd9\x54\xd7\x07\x23\xca\xca\x61\x3c\xfa\xf6\x1d\x7f\x68\x5d\x4a\x42\x92\x4c\xef\x2b\xbf\xe2\x95\x2b\xc2\xbb\x36\x5b\xc6\x12\x91\x93\xb2\x54\xa0\x51\x05\x19\xb8\x8a\x30\xa9\x79\x5e\x11\xce\x95\x01\xfe\x3a\x4d\xc7\xd8\x1f\xe1\xe7\x0e\xf0\xce\x25\xef\x97\xdf\xd9\x41\x37\xd8\xf1\x03\x94\x76\x68\x2c\xc1\x55\xc2\x62\x23\x24\x81\x3e\x73\xaa\x1d\x84\x42\xae\x77\xb5\x14\x5c\xe5\x84\xbd\x70\x55\x3f\xe4\xdc\xc2\x67\xef\xe7\x06\x7a\xed\xb8\x50\xe0\xc8\x75\x7d\x80\xde\x7c\xa5\xc0\x1d\x63\x00\x50\x39\x57\xdb\xdf\x82\x60\xbf\xdf\xfb\xbc\x97\xe9\x6b\x53\x06\xf2\x84\xd9\x20\x89\xa7\xcf\xf3\xf4\x79\x38\xf6\x47\x8c\xad\x94\x24\x6b\x61\xe8\xef\x46\x18\x2a\xb0\x3e\x80\xd7\xb5\x14\x39\x5f\x4b\x82\xe4\x7b\x68\x03\x5e\x1a\xa2\x02\x4e\x77\x42\xf7\x46\x38\xa1\xca\x01\xac\xde\xb8\x3d\x37\xc4\x0a\x61\x9d\x11\xeb\xc6\xdd\x39\x74\x91\x25\x2c\xbe\x02\x5a\x81\x2b\x78\x93\x14\x71\xea\xe1\x69\x92\xc6\xe9\x80\xbd\xc5\xd9\x9f\x8b\x55\x86\xb7\xc9\x72\x39\x99\x67\xf1\x73\x8a\xc5\x12\xd3\xc5\x7c\x16\x67\xf1\x62\x9e\x62\xf1\x82\xc9\xfc\x1d\xaf\xf1\x7c\x36\x00\x09\x57\x91\x01\x7d\xd6\xa6\xd3\xae\x0d\x44\xe7\x1d\x15\x3e\x4b\x89\xee\x86\x6f\xf4\x49\x8c\xad\x29\x17\x1b\x91\x43\x72\x55\x36\xbc\x24\x94\xfa\x83\x8c\x12\xaa\x44\x4d\x66\x27\x6c\xb7\x3d\x0b\xae\x0a\x26\xc5\x4e\x38\xee\xfa\xf8\x3f\xcf\xf1\xd9\x70\x18\xb1\xd0\x58\x7b\xfb\x70\x63\x7f\xe4\x45\x2c\xcc\x2b\xae\x14\xc9\xa8\x5f\x42\xe8\x84\x93\x14\xb5\xad\xff\x42\x54\x64\x5d\x70\x3c\x86\xc1\x29\x7b\x22\x0a\xb2\xb9\x11\x75\x37\xe8\xc2\xcd\x6e\xa9\x8e\xfe\x4a\x9c\xee\x48\xa1\xb6\x17\x38\x11\x6a\xdb\x51\x7d\xee\x5c\xe6\xd6\x3d\x35\x42\x16\x33\xee\xae\xc3\x13\x6e\xdd\xaa\x2e\xb8\xa3\xa2\xc7\xef\x98\xb3\x58\x27\x3b\x3a\xcb\x92\x5e\xa4\x93\xd1\xe9\x2b\xb5\xad\xe1\xaa\x24\xf8\xb1\xa3\x9d\x3d\x1e\xdb\x76\x2d\x75\xbe\x85\x67\xac\x1d\x0a\x47\x3b\x0f\xfe\xf1\xd8\xa3\x7d\x9f\x2e\x15\x5d\xc3\x7b\x1f\xfe\xcf\x83\x2b\xf5\x2f\x2f\x7e\xe4\xc3\xf5\xde\xc5\x8f\xd5\x32\xb9\xb7\xe2\x4a\xd4\xcd\xfa\x62\x46\x77\x76\xd4\x25\x75\xd3\x1d\xdc\x84\xb7\x2d\xa9\xa2\x7b\x69\x7f\xb0\x30\xb8\xae\x35\x0c\x8c\xb5\x11\xfb\x27\x00\x00\xff\xff\x78\x2d\x9d\x22\x6e\x04\x00\x00"

func rssXmlBytes() ([]byte, error) {
	return bindataRead(
		_rssXml,
		"rss.xml",
	)
}

func rssXml() (*asset, error) {
	bytes, err := rssXmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "rss.xml", size: 1134, mode: os.FileMode(420), modTime: time.Unix(1538436116, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"rss.xml": rssXml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"rss.xml": &bintree{rssXml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

